var Promise, S, _, __, assert;

__ = require("i18n").__;

Promise = require('bluebird');

assert = require('cassert');

_ = require('lodash');

S = require('string');

module.exports = function(env) {
  var PageManager, exports;
  PageManager = (function() {
    function PageManager(framework, pages) {
      this.framework = framework;
      this.pages = pages;
    }

    PageManager.prototype.addPage = function(id, page) {
      if (_.findIndex(this.pages, {
        id: id
      }) !== -1) {
        throw new Error('A page with this ID already exists');
      }
      if (page.name == null) {
        throw new Error('No name given');
      }
      this.pages.push(page = {
        id: id,
        name: page.name,
        devices: []
      });
      this.framework.saveConfig();
      this.framework._emitPageAdded(page);
      return page;
    };

    PageManager.prototype.updatePage = function(id, page) {
      var thepage;
      assert(typeof id === "string");
      assert(typeof page === "object");
      assert(page.name != null ? typeof page.name === "string" : true);
      assert(page.devicesOrder != null ? Array.isArray(page.devicesOrder) : true);
      thepage = this.getPageById(id);
      if (thepage == null) {
        throw new Error('Page not found');
      }
      if (page.name != null) {
        thepage.name = page.name;
      }
      if (page.devicesOrder != null) {
        thepage.devices = _.sortBy(thepage.devices, (function(_this) {
          return function(device) {
            var index;
            index = page.devicesOrder.indexOf(device.deviceId);
            if (index === -1) {
              return 99999;
            } else {
              return index;
            }
          };
        })(this));
      }
      this.framework.saveConfig();
      this.framework._emitPageChanged(thepage);
      return thepage;
    };

    PageManager.prototype.getPageById = function(id) {
      return _.find(this.pages, {
        id: id
      });
    };

    PageManager.prototype.addDeviceToPage = function(pageId, deviceId) {
      var page;
      page = this.getPageById(pageId);
      if (page == null) {
        throw new Error('Could not find the page');
      }
      page.devices.push({
        deviceId: deviceId
      });
      this.framework.saveConfig();
      this.framework._emitPageChanged(page);
      return page;
    };

    PageManager.prototype.removeDeviceFromPage = function(pageId, deviceId) {
      var page;
      page = this.getPageById(pageId);
      if (page == null) {
        throw new Error('Could not find the page');
      }
      _.remove(page.devices, {
        deviceId: deviceId
      });
      this.framework.saveConfig();
      this.framework._emitPageChanged(page);
      return page;
    };

    PageManager.prototype.removeDeviceFromAllPages = function(deviceId) {
      var i, len, page, ref, removed;
      ref = this.pages;
      for (i = 0, len = ref.length; i < len; i++) {
        page = ref[i];
        removed = _.remove(page.devices, {
          deviceId: deviceId
        });
        if (removed.length > 0) {
          this.framework._emitPageChanged(page);
        }
      }
      return this.framework.saveConfig();
    };

    PageManager.prototype.removePage = function(id, page) {
      var removedPage;
      removedPage = _.remove(this.pages, {
        id: id
      });
      if (removedPage.length > 0) {
        this.framework.saveConfig();
      }
      this.framework._emitPageRemoved(removedPage[0]);
      return removedPage;
    };

    PageManager.prototype.getPages = function(role) {
      if (role == null) {
        role = "admin";
      }
      return this.pages.filter(function(page) {
        if (page.allowedRoles != null) {
          return page.allowedRoles.indexOf(role) !== -1;
        } else {
          return true;
        }
      });
    };

    PageManager.prototype.updatePageOrder = function(pageOrder) {
      assert((pageOrder != null) && Array.isArray(pageOrder));
      this.framework.config.pages = this.pages = _.sortBy(this.pages, (function(_this) {
        return function(page) {
          var index;
          index = pageOrder.indexOf(page.id);
          if (index === -1) {
            return 99999;
          } else {
            return index;
          }
        };
      })(this));
      this.framework.saveConfig();
      this.framework._emitPageOrderChanged(pageOrder);
      return pageOrder;
    };

    return PageManager;

  })();
  return exports = {
    PageManager: PageManager
  };
};
