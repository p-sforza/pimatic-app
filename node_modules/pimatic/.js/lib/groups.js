var Promise, S, _, __, assert;

__ = require("i18n").__;

Promise = require('bluebird');

assert = require('cassert');

_ = require('lodash');

S = require('string');

module.exports = function(env) {
  var GroupManager, exports;
  GroupManager = (function() {
    function GroupManager(framework, groups) {
      this.framework = framework;
      this.groups = groups;
    }

    GroupManager.prototype.addGroup = function(id, group) {
      if (_.findIndex(this.groups, {
        id: id
      }) !== -1) {
        throw new Error('A group with this ID already exists');
      }
      if (group.name == null) {
        throw new Error('No name given');
      }
      this.groups.push(group = {
        id: id,
        name: group.name,
        devices: [],
        rules: [],
        variables: []
      });
      this.framework.saveConfig();
      this.framework._emitGroupAdded(group);
      return group;
    };

    GroupManager.prototype.updateGroup = function(id, patch) {
      var group, index;
      index = _.findIndex(this.groups, {
        id: id
      });
      if (index === -1) {
        throw new Error('Group not found');
      }
      group = this.groups[index];
      if (patch.name != null) {
        group.name = patch.name;
      }
      if (patch.devicesOrder != null) {
        group.devices = _.sortBy(group.devices, (function(_this) {
          return function(deviceId) {
            index = patch.devicesOrder.indexOf(deviceId);
            if (index === -1) {
              return 99999;
            } else {
              return index;
            }
          };
        })(this));
      }
      if (patch.rulesOrder != null) {
        group.rules = _.sortBy(group.rules, (function(_this) {
          return function(ruleId) {
            index = patch.rulesOrder.indexOf(ruleId);
            if (index === -1) {
              return 99999;
            } else {
              return index;
            }
          };
        })(this));
      }
      if (patch.variablesOrder) {
        group.variables = _.sortBy(group.variables, (function(_this) {
          return function(variableName) {
            index = patch.variablesOrder.indexOf(variableName);
            if (index === -1) {
              return 99999;
            } else {
              return index;
            }
          };
        })(this));
      }
      this.framework.saveConfig();
      this.framework._emitGroupChanged(group);
      return group;
    };

    GroupManager.prototype.getGroupById = function(id) {
      return _.find(this.groups, {
        id: id
      });
    };

    GroupManager.prototype.addDeviceToGroup = function(groupId, deviceId, position) {
      var group, oldGroup;
      assert(typeof deviceId === "string");
      assert(typeof groupId === "string");
      assert(position != null ? typeof position === "number" : true);
      group = this.getGroupById(groupId);
      if (group == null) {
        throw new Error('Could not find the group');
      }
      oldGroup = this.getGroupOfDevice(deviceId);
      if (oldGroup != null) {
        _.remove(oldGroup.devices, (function(_this) {
          return function(id) {
            return id === deviceId;
          };
        })(this));
        this.framework._emitGroupChanged(oldGroup);
      }
      if (!((position != null) || position >= group.devices.length)) {
        group.devices.push(deviceId);
      } else {
        group.devices.splice(position, 0, deviceId);
      }
      this.framework.saveConfig();
      this.framework._emitGroupChanged(group);
      return group;
    };

    GroupManager.prototype.getGroupOfRule = function(ruleId) {
      var g, i, index, len, ref;
      ref = this.groups;
      for (i = 0, len = ref.length; i < len; i++) {
        g = ref[i];
        index = _.indexOf(g.rules, ruleId);
        if (index !== -1) {
          return g;
        }
      }
      return null;
    };

    GroupManager.prototype.addRuleToGroup = function(groupId, ruleId, position) {
      var group, oldGroup;
      assert(typeof ruleId === "string");
      assert(typeof groupId === "string");
      assert(position != null ? typeof position === "number" : true);
      group = this.getGroupById(groupId);
      if (group == null) {
        throw new Error('Could not find the group');
      }
      oldGroup = this.getGroupOfRule(ruleId);
      if (oldGroup != null) {
        _.remove(oldGroup.rules, (function(_this) {
          return function(id) {
            return id === ruleId;
          };
        })(this));
        this.framework._emitGroupChanged(oldGroup);
      }
      if (!((position != null) || position >= group.rules.length)) {
        group.rules.push(ruleId);
      } else {
        group.rules.splice(position, 0, ruleId);
      }
      this.framework.saveConfig();
      this.framework._emitGroupChanged(group);
      return group;
    };

    GroupManager.prototype.getGroupOfVariable = function(variableName) {
      var g, i, index, len, ref;
      ref = this.groups;
      for (i = 0, len = ref.length; i < len; i++) {
        g = ref[i];
        index = _.indexOf(g.variables, variableName);
        if (index !== -1) {
          return g;
        }
      }
      return null;
    };

    GroupManager.prototype.removeDeviceFromGroup = function(groupId, deviceId) {
      var group;
      group = this.getGroupOfDevice(deviceId);
      if (group == null) {
        throw new Error('Device is in no group');
      }
      if (group.id !== groupId) {
        throw new Error("Device is not in group " + groupId);
      }
      _.remove(group.devices, (function(_this) {
        return function(id) {
          return id === deviceId;
        };
      })(this));
      this.framework.saveConfig();
      this.framework._emitGroupChanged(group);
      return group;
    };

    GroupManager.prototype.removeRuleFromGroup = function(groupId, ruleId) {
      var group;
      group = this.getGroupOfRule(ruleId);
      if (group == null) {
        throw new Error('Rule is in no group');
      }
      if (group.id !== groupId) {
        throw new Error("Rule is not in group " + groupId);
      }
      _.remove(group.rules, (function(_this) {
        return function(id) {
          return id === ruleId;
        };
      })(this));
      this.framework.saveConfig();
      this.framework._emitGroupChanged(group);
      return group;
    };

    GroupManager.prototype.removeVariableFromGroup = function(groupId, variableName) {
      var group;
      group = this.getGroupOfVariable(variableName);
      if (group == null) {
        throw new Error('Variable is in no group');
      }
      if (group.id !== groupId) {
        throw new Error("Variable is not in group " + groupId);
      }
      _.remove(group.variables, (function(_this) {
        return function(name) {
          return name === variableName;
        };
      })(this));
      this.framework.saveConfig();
      this.framework._emitGroupChanged(group);
      return group;
    };

    GroupManager.prototype.addVariableToGroup = function(groupId, variableName, position) {
      var group, oldGroup;
      assert(typeof variableName === "string");
      assert(typeof groupId === "string");
      assert(position != null ? typeof position === "number" : true);
      group = this.getGroupById(groupId);
      if (group == null) {
        throw new Error('Could not find the group');
      }
      oldGroup = this.getGroupOfVariable(variableName);
      if (oldGroup != null) {
        _.remove(oldGroup.variables, (function(_this) {
          return function(name) {
            return name === variableName;
          };
        })(this));
        this.framework._emitGroupChanged(oldGroup);
      }
      if (!((position != null) || position >= group.variables.length)) {
        group.variables.push(variableName);
      } else {
        group.variables.splice(position, 0, variableName);
      }
      this.framework.saveConfig();
      this.framework._emitGroupChanged(group);
      return group;
    };

    GroupManager.prototype.removeGroup = function(id, page) {
      var removedGroup;
      removedGroup = _.remove(this.groups, {
        id: id
      });
      if (removedGroup.length > 0) {
        this.framework.saveConfig();
      }
      this.framework._emitGroupRemoved(removedGroup[0]);
      return removedGroup;
    };

    GroupManager.prototype.getGroupOfDevice = function(deviceId) {
      var g, i, index, len, ref;
      ref = this.groups;
      for (i = 0, len = ref.length; i < len; i++) {
        g = ref[i];
        index = _.indexOf(g.devices, deviceId);
        if (index !== -1) {
          return g;
        }
      }
      return null;
    };

    GroupManager.prototype.getGroups = function() {
      return this.groups;
    };

    GroupManager.prototype.updateGroupOrder = function(groupOrder) {
      assert((groupOrder != null) && Array.isArray(groupOrder));
      this.framework.config.groups = this.groups = _.sortBy(this.groups, (function(_this) {
        return function(group) {
          var index;
          index = groupOrder.indexOf(group.id);
          if (index === -1) {
            return 99999;
          } else {
            return index;
          }
        };
      })(this));
      this.framework.saveConfig();
      this.framework._emitGroupOrderChanged(groupOrder);
      return groupOrder;
    };

    return GroupManager;

  })();
  return exports = {
    GroupManager: GroupManager
  };
};
