
/*
Logger
======
 */
var TaggedConsoleTarget, TaggedLogger, _, base, colors, events, logger, moment, util, winston, winstonLogger,
  slice = [].slice;

winston = require('winston');

_ = require('lodash');

events = require("events");

util = require("util");

moment = require("moment");

colors = require("colors");

TaggedConsoleTarget = function(options) {
  var timeString;
  options = options || {};
  this.name = "taggedConsoleLogger";
  this.level = options.level || "info";
  this.target = options.target || process.stdout;
  this.colorize = options.colorize;
  this.prevTimestamp = new Date();
  timeString = moment(this.prevTimestamp).format("HH:mm:ss.SSS YYYY-MM-DD dddd");
  if (this.colorize) {
    timeString = timeString.grey;
  }
  return this.target.write(timeString + "\n");
};

util.inherits(TaggedConsoleTarget, winston.Transport);

TaggedConsoleTarget.prototype.log = function(level, msg, meta, callback) {
  var color, header, spec, tags, target, timeString, timestamp;
  spec = {
    info: {},
    warn: {
      color: "yellow"
    },
    error: {
      color: "red"
    },
    debug: {
      color: "blue"
    }
  };
  color = spec[level].color;
  meta = meta || {};
  tags = meta.tags || [];
  timestamp = meta.timestamp || new Date();
  if (moment(timestamp).format("YYYY-MM-DD") !== moment(this.prevTimestamp).format("YYYY-MM-DD")) {
    this.prevTimestamp = timestamp;
    timeString = moment(this.prevTimestamp).format("HH:mm:ss.SSS YYYY-MM-DD dddd");
    if (this.colorize) {
      timeString = timeString.grey;
    }
  }
  timeString = moment(timestamp).format("HH:mm:ss.SSS");
  tags = " [" + tags.join(", ") + "]";
  if (this.colorize) {
    timeString = timeString.grey;
    tags = tags.green;
    header = timeString + tags;
  } else {
    header = "" + timeString + tags + " " + level + ":";
  }
  target = this.target;
  msg.split("\n").forEach((function(_this) {
    return function(line, index) {
      var coloredLine, separator;
      coloredLine = void 0;
      if (color && _this.colorize) {
        coloredLine = line[color];
      } else {
        coloredLine = line;
      }
      separator = [" ", ">"][(index === 0 ? 0 : 1)];
      if (_this.colorize) {
        separator = separator.grey;
      }
      return target.write(header + separator + coloredLine + "\n");
    };
  })(this));
  return callback(null, true);
};

TaggedLogger = function(target, tags, debug) {
  this.target = target;
  this.tags = tags || [];
  this.logDebug = debug;
  return this;
};

TaggedLogger.prototype.log = function() {
  var args, level, msg;
  level = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  msg = util.format.apply(null, args);
  return this.target.log(level, msg, {
    timestamp: new Date(),
    tags: this.tags
  });
};

TaggedLogger.prototype.debug = function() {
  var args, level, ref;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  level = this.target.level;
  if (this.logDebug) {
    this.target.transports.taggedConsoleLogger.level = "debug";
  }
  if (args.length === 1 && ((ref = args[0]) != null ? ref.stack : void 0)) {
    this.log("debug", args[0].stack);
  } else {
    this.log.apply(this, ["debug"].concat(slice.call(args)));
  }
  return this.target.transports.taggedConsoleLogger.level = level;
};

TaggedLogger.prototype.info = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return this.log.apply(this, ["info"].concat(slice.call(args)));
};

TaggedLogger.prototype.warn = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return this.log.apply(this, ["warn"].concat(slice.call(args)));
};

TaggedLogger.prototype.error = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return this.log.apply(this, ["error"].concat(slice.call(args)));
};

TaggedLogger.prototype.createSublogger = function(tags, debug) {
  var newTags;
  if (debug == null) {
    debug = false;
  }
  if (!Array.isArray(tags)) {
    tags = [tags];
  }
  newTags = _.uniq(this.tags.concat(tags));
  return new TaggedLogger(this.target, newTags, debug);
};

winstonLogger = new winston.Logger({
  transports: [
    new TaggedConsoleTarget({
      level: 'debug',
      colorize: process.env['PIMATIC_DAEMONIZED'] == null
    })
  ]
});

TaggedLogger.prototype.base = base = new TaggedLogger(winstonLogger);

logger = base.createSublogger("pimatic");

logger.winston = winstonLogger;

module.exports = logger;
