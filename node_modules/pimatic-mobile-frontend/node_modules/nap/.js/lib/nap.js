var _, _str, clearAssetsDir, coffee, crypto, embedFiles, exec, expandAssetGlobs, fileHasChanged, fileUtil, fingerprintForPkg, fs, generateJSTs, getSrcUrls, glob, gzipPkg, hoganPrefix, jadeRuntime, mkdirp, path, preprocess, preprocessPkg, preprocessors, rimraf, sqwish, templateParsers, uglify, uglifyjs, writeFile, zlib;

fs = require('fs');

path = require('path');

exec = require('child_process').exec;

coffee = require('coffee-script');

jadeRuntime = fs.readFileSync(path.resolve(__dirname, '../deps/jade.runtime.js')).toString();

hoganPrefix = fs.readFileSync(path.resolve(__dirname, '../deps/hogan.js')).toString();

sqwish = require('sqwish');

uglifyjs = require("uglify-js");

_ = require('underscore');

_str = require('underscore.string');

mkdirp = require('mkdirp');

fileUtil = require('file');

glob = require('glob');

rimraf = require('rimraf');

crypto = require('crypto');

zlib = require('zlib');

module.exports = (function(_this) {
  return function(options) {
    var ext, exts, filename, j, len, ref, ref1, ref2, ref3, ref4;
    if (options == null) {
      options = {};
    }
    if (options.assets == null) {
      throw new Error("You must specify an 'assets' obj with keys 'js', 'css', or 'jst'");
    }
    _this.assets = _.clone(options.assets);
    _this.originalAssets = _.clone(options.assets);
    _this.appDir = (options.appDir != null ? options.appDir : process.cwd());
    expandAssetGlobs();
    _this.publicDir = path.resolve(_this.appDir, options.publicDir || 'public');
    _this.mode = (function() {
      if ((ref = options.mode) != null) {
        return ref;
      } else {
        switch (process.env.NODE_ENV) {
          case 'staging':
            return 'production';
          case 'production':
            return 'production';
          default:
            return 'development';
        }
      }
    })();
    _this.cdnUrl = options.cdnUrl != null ? options.cdnUrl.replace(/\/$/, '') : void 0;
    _this.uglifyOpts = (ref1 = options.uglifyOpts) != null ? ref1 : {};
    _this.gzip = (ref2 = options.gzip) != null ? ref2 : false;
    _this.minify = (ref3 = options.minify) != null ? ref3 : true;
    _this._tmplPrefix = 'window.JST = window.JST || {};\n';
    _this._assetsDir = '/assets';
    _this._outputDir = path.join(_this.publicDir, _this._assetsDir);
    _this._fileMtimeMap = {};
    _this._preprocessedCache = {};
    _this._fingerprintCache = {
      js: {},
      jst: {},
      css: {}
    };
    _this.getNamespace = (ref4 = options.getNamespace) != null ? ref4 : _this.defaultGetNamespace;
    if (!fs.existsSync(_this.publicDir)) {
      throw new Error("The directory " + _this.publicDir + " doesn't exist");
    }
    if (_this.mode === 'development') {
      clearAssetsDir();
    }
    exts = _.uniq((function() {
      var j, len, ref5, results;
      ref5 = _.flatten(_.values(this.assets.jst));
      results = [];
      for (j = 0, len = ref5.length; j < len; j++) {
        filename = ref5[j];
        results.push(ext = path.extname(filename));
      }
      return results;
    }).call(_this));
    for (j = 0, len = exts.length; j < len; j++) {
      ext = exts[j];
      switch (ext) {
        case '.jade':
          _this._tmplPrefix = jadeRuntime + '\n' + _this._tmplPrefix;
          break;
        case '.mustache':
          _this._tmplPrefix = hoganPrefix + '\n' + _this._tmplPrefix;
      }
    }
    return _this;
  };
})(this);

module.exports.getSrcUrls = getSrcUrls = (function(_this) {
  return function(type, pkg, gzip) {
    var contents, extension, filename, fingerprint, ref, ref1, src, urls;
    if (_this.assets[type][pkg] == null) {
      throw new Error("Cannot find package '" + pkg + "'");
    }
    if (_this.mode === 'production') {
      fingerprint = '-' + fingerprintForPkg(type, pkg);
      extension = "" + type;
      if (gzip) {
        extension += "." + type[0] + "gz";
      }
      src = ((ref = _this.cdnUrl) != null ? ref : _this._assetsDir) + '/' + ("" + pkg + (fingerprint != null ? fingerprint : '') + "." + extension);
      return [src];
    }
    expandAssetGlobs();
    urls = [];
    ref1 = preprocessPkg(pkg, type);
    for (filename in ref1) {
      contents = ref1[filename];
      if (!_this.usingMiddleware) {
        writeFile(filename, contents);
      }
      if (!filename.match(/\.map$/)) {
        urls.push(_this._assetsDir + "/" + filename);
      }
    }
    return urls;
  };
})(this);

module.exports.js = (function(_this) {
  return function(pkg, gzip) {
    var j, len, output, url, urls;
    if (gzip == null) {
      gzip = _this.gzip;
    }
    urls = getSrcUrls('js', pkg, gzip);
    output = '';
    for (j = 0, len = urls.length; j < len; j++) {
      url = urls[j];
      output += "<script src='" + url + "' type='text/javascript'></script>";
    }
    return output;
  };
})(this);

module.exports.css = (function(_this) {
  return function(pkg, gzip) {
    var j, len, output, url, urls;
    if (gzip == null) {
      gzip = _this.gzip;
    }
    urls = getSrcUrls('css', pkg, gzip);
    output = '';
    for (j = 0, len = urls.length; j < len; j++) {
      url = urls[j];
      output += "<link href='" + url + "' rel='stylesheet' type='text/css'>";
    }
    return output;
  };
})(this);

module.exports.jst = (function(_this) {
  return function(pkg, gzip) {
    var fingerprint, ref, src;
    if (gzip == null) {
      gzip = _this.gzip;
    }
    if (_this.assets.jst[pkg] == null) {
      throw new Error("Cannot find package '" + pkg + "'");
    }
    if (_this.mode === 'production') {
      if (_this.mode === 'production') {
        fingerprint = '-' + fingerprintForPkg('jst', pkg);
      }
      src = ((ref = _this.cdnUrl) != null ? ref : _this._assetsDir) + '/' + ("" + pkg + (fingerprint != null ? fingerprint : '') + ".jst.js");
      if (gzip) {
        src += '.jgz';
      }
      return "<script src='" + src + "' type='text/javascript'></script>";
    }
    expandAssetGlobs();
    if (!_this.usingMiddleware) {
      fs.writeFileSync(_this._outputDir + '/' + pkg + '.jst.js', generateJSTs(pkg));
      fs.writeFileSync(_this._outputDir + '/nap-templates-prefix.js', _this._tmplPrefix);
    }
    return "<script src='" + _this._assetsDir + "/nap-templates-prefix.js' type='text/javascript'></script>\n<script src='" + _this._assetsDir + "/" + pkg + ".jst.js' type='text/javascript'></script>";
  };
})(this);

module.exports["package"] = (function(_this) {
  return function(callback) {
    var contents, filename, files, fingerprint, fn, key, pkg, pkgs, ref, ref1, ref2, results, total;
    if (callback == null) {
      callback = function() {};
    }
    clearAssetsDir();
    total = _.reduce((function() {
      var ref, results;
      ref = this.assets;
      results = [];
      for (key in ref) {
        pkgs = ref[key];
        results.push(_.values(pkgs).length);
      }
      return results;
    }).call(_this), function(memo, num) {
      return memo + num;
    });
    callback = _.after(total, callback);
    if (_this.assets.js != null) {
      ref = _this.assets.js;
      for (pkg in ref) {
        files = ref[pkg];
        contents = ((function() {
          var ref1, results;
          ref1 = preprocessPkg(pkg, 'js');
          results = [];
          for (fn in ref1) {
            contents = ref1[fn];
            results.push(contents);
          }
          return results;
        })()).join(';\n');
        if (_this.mode === 'production' && _this.minify) {
          contents = uglify(contents);
        }
        fingerprint = '-' + fingerprintForPkg('js', pkg);
        filename = "" + pkg + (fingerprint != null ? fingerprint : '') + ".js";
        writeFile(filename, contents, function(err) {
          if (_this.gzip) {
            gzipPkg(contents, filename, callback);
          } else {
            callback();
          }
          return total++;
        });
      }
    }
    if (_this.assets.css != null) {
      ref1 = _this.assets.css;
      for (pkg in ref1) {
        files = ref1[pkg];
        contents = ((function() {
          var ref2, results;
          ref2 = preprocessPkg(pkg, 'css');
          results = [];
          for (filename in ref2) {
            contents = ref2[filename];
            results.push(embedFiles(filename, contents));
          }
          return results;
        })()).join('');
        if (_this.mode === 'production') {
          contents = sqwish.minify(contents);
        }
        fingerprint = '-' + fingerprintForPkg('css', pkg);
        filename = "" + pkg + (fingerprint != null ? fingerprint : '') + ".css";
        writeFile(filename, contents, function(err) {
          if (_this.gzip) {
            gzipPkg(contents, filename, callback);
          } else {
            callback();
          }
          return total++;
        });
      }
    }
    if (_this.assets.jst != null) {
      ref2 = _this.assets.jst;
      results = [];
      for (pkg in ref2) {
        files = ref2[pkg];
        contents = generateJSTs(pkg);
        contents = _this._tmplPrefix + contents;
        if (_this.mode === 'production' && _this.minify) {
          contents = uglify(contents);
        }
        fingerprint = '-' + fingerprintForPkg('jst', pkg);
        filename = "" + pkg + (fingerprint != null ? fingerprint : '') + ".jst.js";
        results.push(writeFile(filename, contents, function(err) {
          if (_this.gzip) {
            gzipPkg(contents, filename, callback);
          } else {
            callback();
          }
          return total++;
        }));
      }
      return results;
    }
  };
})(this);

module.exports.middleware = (function(_this) {
  return function(req, res, next) {
    var contents, filename, filenames, j, k, len, len1, pkg, ref, ref1;
    if (_this.mode !== 'development') {
      next();
      return;
    }
    _this.usingMiddleware = true;
    switch (path.extname(req.url)) {
      case '.css':
        if (typeof res.setHeader === "function") {
          res.setHeader("Content-Type", "text/css");
        }
        ref = _this.assets.css;
        for (pkg in ref) {
          filenames = ref[pkg];
          for (j = 0, len = filenames.length; j < len; j++) {
            filename = filenames[j];
            if (req.url.replace(/^\/assets\/|.(?!.*\.).*/g, '') === filename.replace(/.(?!.*\.).*/, '')) {
              contents = fs.readFileSync(path.resolve(_this.appDir + '/' + filename)).toString();
              contents = preprocess(contents, filename);
              res.end(contents);
              return;
            }
          }
        }
        break;
      case '.js':
        if (typeof res.setHeader === "function") {
          res.setHeader("Content-Type", "application/javascript");
        }
        if (req.url.match(/\.jst\.js$/)) {
          pkg = path.basename(req.url, '.jst.js');
          res.end(generateJSTs(pkg));
          return;
        }
        if (req.url.match(/nap-templates-prefix\.js$/)) {
          res.end(_this._tmplPrefix);
          return;
        }
        ref1 = _this.assets.js;
        for (pkg in ref1) {
          filenames = ref1[pkg];
          for (k = 0, len1 = filenames.length; k < len1; k++) {
            filename = filenames[k];
            if (req.url.replace(/^\/assets\/|.(?!.*\.).*/g, '') === filename.replace(/.(?!.*\.).*/, '')) {
              contents = fs.readFileSync(path.resolve(_this.appDir + '/' + filename)).toString();
              contents = preprocess(contents, filename);
              res.end(contents);
              return;
            }
          }
        }
    }
    return next();
  };
})(this);

module.exports.preprocessors = preprocessors = {
  '.coffee': function(contents, filename) {
    var err;
    try {
      return coffee.compile(contents);
    } catch (error) {
      err = error;
      err.stack = ("Nap error compiling " + filename + "\n") + err.stack;
      throw err;
    }
  },
  '.styl': (function(_this) {
    return function(contents, filename) {
      require('stylus')(contents).set('filename', _this.appDir + '/' + filename).use(require('nib')()).render(function(err, out) {
        if (err) {
          throw err;
        }
        return contents = out;
      });
      return contents;
    };
  })(this),
  '.less': (function(_this) {
    return function(contents, filename) {
      var dir, parser;
      dir = _this.appDir + '/' + path.dirname(filename);
      parser = new (require('less').Parser)({
        paths: [dir],
        filename: path.basename(filename),
        syncImport: true
      });
      parser.parse(contents, function(err, tree) {
        return contents = tree.toCSS();
      });
      return contents;
    };
  })(this)
};

module.exports.templateParsers = templateParsers = {
  '.jade': function(contents, filename) {
    return require('jade').compileClient(contents, {
      compileDebug: true
    });
  },
  '.mustache': function(contents, filename) {
    return 'new Hogan.Template(' + require('hogan.js').compile(contents, {
      asString: true
    }) + ')';
  },
  '.mustache.jade': function(contents, filename) {
    var jadeOutput;
    jadeOutput = require('jade').compile(contents)();
    return 'new Hogan.Template(' + require('hogan.js').compile(jadeOutput, {
      asString: true
    }) + ')';
  }
};

this.defaultGetNamespace = function(filename) {
  var namespace;
  if (filename.indexOf('templates') > -1) {
    return namespace = filename.split('templates').slice(-1)[0].replace(/^\/|\..*/g, '');
  } else {
    return namespace = filename.split('/').slice(-1)[0].replace(/^\/|\..*/g, '');
  }
};

module.exports.generateJSTs = generateJSTs = (function(_this) {
  return function(pkg) {
    var contents, data, exts, filename, fullPath, j, len, namespace, parser, parsers, ref, tmplFileContents;
    tmplFileContents = '';
    exts = _.keys(templateParsers);
    parsers = _.sortBy(exts, function(ext) {
      return ext.match(/\./g).length;
    });
    parsers.reverse();
    ref = _this.assets.jst[pkg];
    for (j = 0, len = ref.length; j < len; j++) {
      filename = ref[j];
      fullPath = path.resolve(_this.appDir + '/' + filename);
      parser = _.find(parsers, function(parser) {
        return _str.endsWith(filename, parser);
      });
      contents = fileHasChanged(fullPath) && (parser != null) || (_this._preprocessedCache[filename] == null) ? (data = fs.readFileSync(fullPath).toString(), data = data.replace(/^\uFEFF/, ''), _this._preprocessedCache[filename] = templateParsers[parser](data, filename).toString(), _this._preprocessedCache[filename]) : _this._preprocessedCache[filename];
      namespace = _this.getNamespace(filename);
      tmplFileContents += "JST['" + namespace + "'] = " + contents + ";\n";
    }
    return tmplFileContents;
  };
})(this);

fileHasChanged = (function(_this) {
  return function(filename) {
    var changed, mtime;
    mtime = fs.statSync(filename).mtime.getTime();
    changed = _this._fileMtimeMap[filename] !== mtime;
    _this._fileMtimeMap[filename] = mtime;
    return changed;
  };
})(this);

preprocess = (function(_this) {
  return function(contents, filename) {
    var ext;
    ext = path.extname(filename);
    if (preprocessors[ext] != null) {
      return preprocessors[ext](contents, filename);
    } else {
      return contents;
    }
  };
})(this);

preprocessPkg = (function(_this) {
  return function(pkg, type) {
    var contents, data, filename, fullPath, j, len, obj, outputFilename, ref;
    obj = {};
    ref = _this.assets[type][pkg];
    for (j = 0, len = ref.length; j < len; j++) {
      filename = ref[j];
      fullPath = path.resolve(_this.appDir + '/' + filename);
      contents = fileHasChanged(fullPath) || (_this._preprocessedCache[filename] == null) ? (data = fs.readFileSync(fullPath).toString(), _this._preprocessedCache[filename] = preprocess(data, filename)) : _this._preprocessedCache[filename];
      outputFilename = filename.match(/\.map$/) ? filename : filename.replace(/\.[^.]*$/, '' + '.' + type);
      obj[outputFilename] = contents;
    }
    return obj;
  };
})(this);

writeFile = (function(_this) {
  return function(filename, contents, callback) {
    var dir, file;
    file = path.join(_this._outputDir, filename);
    dir = path.dirname(file);
    if (!fs.existsSync(dir)) {
      mkdirp.sync(dir, '0755');
    }
    fs.writeFileSync(file, contents != null ? contents : '');
    if (callback != null) {
      return callback();
    }
  };
})(this);

uglify = (function(_this) {
  return function(str) {
    return uglifyjs.minify(str, _.extend({
      fromString: true
    }, _this.uglifyOpts)).code;
  };
})(this);

embedFiles = (function(_this) {
  return function(filename, contents) {
    var base64Str, end, endsWithEmbed, i, j, mime, mimes, newUrl, offset, offsetContents, ref, start;
    endsWithEmbed = _str.endsWith(path.basename(filename).split('.')[0], '_embed');
    if ((contents == null) || contents === '' || !endsWithEmbed) {
      return contents;
    }
    mimes = {
      '.gif': 'image/gif',
      '.png': 'image/png',
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.svg': 'image/svg+xml',
      '.ttf': 'font/truetype;charset=utf-8',
      '.woff': 'font/woff;charset=utf-8'
    };
    offset = 0;
    offsetContents = contents.substring(offset, contents.length);
    if (offsetContents.match(/url/g) == null) {
      return contents;
    }
    for (i = j = 0, ref = offsetContents.match(/url/g).length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      start = offsetContents.indexOf('url(') + 4 + offset;
      end = contents.substring(start, contents.length).indexOf(')') + start;
      filename = _str.trim(_str.trim(contents.substring(start, end), '"'), "'");
      filename = path.join(_this.publicDir, filename.replace(/^\//, ''));
      mime = mimes[path.extname(filename)];
      if (mime != null) {
        if (fs.existsSync(filename)) {
          base64Str = fs.readFileSync(path.resolve(filename)).toString('base64');
          newUrl = "data:" + mime + ";base64," + base64Str;
          contents = _str.splice(contents, start, end - start, newUrl);
          end = start + newUrl.length + 4;
        } else {
          throw new Error('Tried to embed data-uri, but could not find file ' + filename);
        }
      } else {
        end += 4;
      }
      offset = end;
      offsetContents = contents.substring(offset, contents.length);
    }
    return contents;
  };
})(this);

gzipPkg = (function(_this) {
  return function(contents, filename, callback) {
    var ext, file, outputFilename;
    file = path.join(_this._outputDir, filename);
    ext = _str.endsWith(filename, '.js') ? '.jgz' : '.cgz';
    outputFilename = file + ext;
    return zlib.gzip(contents, function(err, buf) {
      return fs.writeFile(outputFilename, buf, callback);
    });
  };
})(this);

module.exports.fingerprintForPkg = fingerprintForPkg = (function(_this) {
  return function(pkgType, pkgName) {
    var contents, filename, md5, pkgContents;
    if (_this._fingerprintCache[pkgType][pkgName] != null) {
      return _this._fingerprintCache[pkgType][pkgName];
    }
    md5 = crypto.createHash('md5');
    pkgContents = pkgType === 'css' || pkgType === 'js' ? ((function() {
      var ref, results;
      ref = preprocessPkg(pkgName, pkgType);
      results = [];
      for (filename in ref) {
        contents = ref[filename];
        results.push(contents);
      }
      return results;
    })()).join('') : generateJSTs(pkgName);
    md5.update(pkgContents);
    return _this._fingerprintCache[pkgType][pkgName] = md5.digest('hex');
  };
})(this);

expandAssetGlobs = (function(_this) {
  return function() {
    var assets, dirs, file, j, key, len, matches, obj, pattern, patterns, pkg, ref, ref1;
    assets = {
      js: {},
      css: {},
      jst: {}
    };
    ref = _this.originalAssets;
    for (key in ref) {
      obj = ref[key];
      ref1 = _this.originalAssets[key];
      for (pkg in ref1) {
        patterns = ref1[pkg];
        matches = [];
        for (j = 0, len = patterns.length; j < len; j++) {
          pattern = patterns[j];
          dirs = glob.sync(path.resolve(_this.appDir + "/" + pattern).replace(/\\/g, "\/"));
          matches = matches.concat(dirs);
        }
        matches = _.uniq(_.flatten(matches));
        matches = (function() {
          var k, len1, results;
          results = [];
          for (k = 0, len1 = matches.length; k < len1; k++) {
            file = matches[k];
            results.push(path.normalize(file).replace(this.appDir, '').replace(/^\//, '').replace(/\\/g, '\/'));
          }
          return results;
        }).call(_this);
        assets[key][pkg] = matches;
      }
    }
    return _this.assets = assets;
  };
})(this);

clearAssetsDir = (function(_this) {
  return function() {
    rimraf.sync(_this._outputDir);
    return fs.mkdirSync(_this._outputDir, '0755');
  };
})(this);
