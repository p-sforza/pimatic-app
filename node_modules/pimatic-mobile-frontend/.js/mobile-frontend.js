var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = function(env) {
  var M, MobileFrontend, Promise, S, _, assert, crypto, express, fs, jqmthemer, path, plugin, util;
  util = require('util');
  fs = env.require('fs.extra');
  path = require('path');
  Promise = env.require('bluebird');
  Promise.promisifyAll(fs);
  assert = env.require('cassert');
  express = env.require("express");
  S = env.require('string');
  M = env.matcher;
  global.i18n = env.require('i18n');
  global.__ = i18n.__;
  _ = env.require('lodash');
  crypto = require('crypto');
  global.nap = require('nap');
  jqmthemer = require('jqmthemer');
  MobileFrontend = (function(superClass) {
    extend(MobileFrontend, superClass);

    function MobileFrontend() {
      return MobileFrontend.__super__.constructor.apply(this, arguments);
    }

    MobileFrontend.prototype.additionalAssetFiles = {
      'js': [],
      'css': [],
      'html': []
    };

    MobileFrontend.prototype.assetsPacked = false;

    MobileFrontend.prototype.init = function(app, framework, config) {
      var certFile, j, len, ref, theme, themesWithLegazy;
      this.app = app;
      this.framework = framework;
      this.config = config;
      if ((ref = this.config.theme) === "aloe" || ref === "candy" || ref === "melon" || ref === "mint" || ref === "royal" || ref === "sand" || ref === "slate" || ref === "water") {
        this.config.theme = "graphite/" + this.config.theme;
      }
      if (this.config.theme === "classic") {
        this.config.theme = "jqm/" + this.config.theme;
      }
      themesWithLegazy = require('./mobile-frontend-config-schema').properties.theme["enum"];
      this.themes = [];
      for (j = 0, len = themesWithLegazy.length; j < len; j++) {
        theme = themesWithLegazy[j];
        if (theme.indexOf('/') === -1) {
          continue;
        }
        this.themes.push(theme);
      }
      this.app.post('/client-error', (function(_this) {
        return function(req, res) {
          var error;
          error = req.body.error;
          env.logger.error("Client error:", error.message);
          env.logger.debug(JSON.stringify(error, null, "  "));
          return res.sendStatus(200);
        };
      })(this));
      this.app.get('/refresh', (function(_this) {
        return function(req, res) {
          var url;
          url = req.query.url;
          if (!url) {
            url = "/";
          }
          return res.redirect(302, url);
        };
      })(this));
      certFile = path.resolve(this.framework.maindir, '../..', this.framework.config.settings.httpsServer.rootCertFile);
      fs.exists(certFile, (function(_this) {
        return function(exists) {
          return _this.hasRootCACert = exists;
        };
      })(this));
      this.app.get('/root-ca-cert.crt', (function(_this) {
        return function(req, res) {
          res.setHeader('content-type', 'application/x-x509-ca-cert');
          return res.sendfile(certFile);
        };
      })(this));
      return this.framework.on('after init', (function(_this) {
        return function(context) {
          var finished;
          finished = _this.setupThemes().then(function() {
            var assets, e, packedAssets, ref1;
            try {
              ref1 = _this.setupAssets(), assets = ref1[0], packedAssets = ref1[1];
            } catch (error1) {
              e = error1;
              env.logger.error("Error setting up assets in mobile-frontend: " + e.message);
              env.logger.debug(e.stack);
              return;
            }
            if (_this.config.mode === "development") {
              _this.app.get('/', function(req, res) {
                return _this.renderIndex(packedAssets).then(function(html) {
                  return res.send(html);
                })["catch"](function(error) {
                  env.logger.error(error.message);
                  env.logger.debug(error.stack);
                  return res.send(error);
                }).done();
              });
            } else {
              return _this.renderIndex(packedAssets).then(function(html) {
                var indexFile;
                indexFile = __dirname + '/public/index.html';
                fs.writeFileAsync(indexFile, html);
                return _this.setupManifest(assets, html);
              });
            }
          });
          context.waitForIt(finished);
        };
      })(this));
    };

    MobileFrontend.prototype.renderIndex = function(packedAssets) {
      var awaitingRenders, jade, page, renderOptions, theme;
      env.logger.info("rendering html");
      jade = require('jade');
      Promise.promisifyAll(jade);
      theme = {
        flat: this.config.flat,
        headerSwatch: 'a',
        dividerSwatch: 'a',
        menuSwatch: 'f',
        fullName: this.config.theme
      };
      renderOptions = {
        pretty: this.config.mode === "development",
        compileDebug: this.config.mode === "development",
        globals: ["__", "nap", "i18n"],
        mode: this.config.mode,
        api: env.api.all,
        customTitle: this.config.customTitle,
        theme: theme,
        themes: this.themes,
        scripts: packedAssets.scripts,
        styles: packedAssets.styles
      };
      awaitingRenders = (function() {
        var j, len, ref, results;
        ref = this.additionalAssetFiles['html'];
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          page = ref[j];
          page = path.resolve(__dirname, '..', page);
          switch (path.extname(page)) {
            case '.jade':
              if (this.config.debug) {
                env.logger.debug("rendering: " + page);
              }
              results.push(jade.renderFileAsync(page, renderOptions));
              break;
            case '.html':
              results.push(fs.readFileAsync(page));
              break;
            default:
              env.logger.error("Could not add page: " + page + " unknown extension.");
              results.push(Promise.resolve(""));
          }
        }
        return results;
      }).call(this);
      return Promise.all(awaitingRenders).then((function(_this) {
        return function(htmlPages) {
          var layout;
          renderOptions.additionalPages = _.reduce(htmlPages, function(html, page) {
            return html + page;
          });
          layout = path.resolve(__dirname, 'app/views/layout.jade');
          if (_this.config.debug) {
            env.logger.debug("rendering: " + layout);
          }
          return jade.renderFileAsync(layout, renderOptions).then(function(html) {
            env.logger.info("rendering html finished");
            return html;
          });
        };
      })(this));
    };

    MobileFrontend.prototype.registerAssetFile = function(type, file) {
      assert(type === 'css' || type === 'js' || type === 'html');
      assert(!this.assetsPacked, "Assets are already packed. Please call this function only from" + "the pimatic 'after init' event.");
      return this.additionalAssetFiles[type].push(file);
    };

    MobileFrontend.prototype.setupAssets = function() {
      var assetType, assets, css, f, files, i, j, js, k, l, len, len1, len2, len3, m, minPath, n, napAssets, packedAssets, parentDir, ref, ref1, ref2, ref3, sec;
      parentDir = path.resolve(__dirname, '..');
      js = {
        lazyload: ["pimatic-mobile-frontend/app/js/lazyload.js"],
        base: ["pimatic-mobile-frontend/app/js/es6-promise.js", "pimatic-mobile-frontend/app/js/tracekit.js", "pimatic-mobile-frontend/app/js/jquery-1.11.2.js", "pimatic-mobile-frontend/app/mobile-init.js", "pimatic-mobile-frontend/app/js/jquery.mobile-1.4.5.js", "pimatic-mobile-frontend/app/js/jquery.mobile.toast.js", "pimatic-mobile-frontend/app/js/jquery.pep.js", "pimatic-mobile-frontend/app/js/jquery.storageapi.js", "pimatic-mobile-frontend/app/js/knockout-3.4.0rc.js", "pimatic-mobile-frontend/app/js/knockout-template-cache.js", "pimatic-mobile-frontend/app/js/knockout.mapper.js", "pimatic-mobile-frontend/app/js/overthrow.js", "pimatic-mobile-frontend/app/js/owl.carousel.js", "pimatic-mobile-frontend/app/js/jquery.sparkline.js", "pimatic-mobile-frontend/app/js/jqm-spinbox.js", "pimatic-mobile-frontend/app/js/timebox.js", "pimatic-mobile-frontend/app/js/jquery.autosize.input.js", "pimatic-mobile-frontend/app/js/human-format.js", "pimatic-mobile-frontend/app/js/sweetalert2.js", "pimatic-mobile-frontend/app/js/headroom.js", "pimatic-mobile-frontend/app/js/inobounce.js", "pimatic-mobile-frontend/app/js/fastclick.js"],
        textcomplete: ["pimatic-mobile-frontend/app/js/jquery.textcomplete.js"],
        jsonschemaeditor: ["pimatic-mobile-frontend/app/js/json-schema-editor.coffee"],
        dygraph: ["pimatic-mobile-frontend/app/js/dygraph.js"],
        datepicker: ["pimatic-mobile-frontend/app/js/jquery.ui.datepicker.js", "pimatic-mobile-frontend/app/js/jquery.mobile.datepicker.mod.js", "pimatic-mobile-frontend/app/datepicker-defaults.coffee"],
        mobiscroll: ["pimatic-mobile-frontend/app/js/mobiscroll.core.js", "pimatic-mobile-frontend/app/js/mobiscroll.widget.js", "pimatic-mobile-frontend/app/js/mobiscroll.scroller.js", "pimatic-mobile-frontend/app/js/mobiscroll.util.datetime.js", "pimatic-mobile-frontend/app/js/mobiscroll.datetimebase.js", "pimatic-mobile-frontend/app/js/mobiscroll.datetime.js", "pimatic-mobile-frontend/app/js/mobiscroll.select.js"],
        index: ["pimatic-mobile-frontend/app/scope.coffee", "pimatic-mobile-frontend/app/helper.coffee", "pimatic-mobile-frontend/app/knockout-custom-bindings.coffee", "pimatic-mobile-frontend/app/connection.coffee", "pimatic-mobile-frontend/app/pages/index-items.coffee", "pimatic-mobile-frontend/app/pages/index.coffee", "pimatic-mobile-frontend/app/pages/login.coffee"].concat(this.additionalAssetFiles['js']),
        'add-item-page': ["pimatic-mobile-frontend/app/pages/add-item.coffee"],
        editor: ["pimatic-mobile-frontend/app/js/jsoneditor.js", "pimatic-mobile-frontend/app/js/ace.js", "pimatic-mobile-frontend/app/js/jsonlint.js"],
        'edit-rule-page': ["pimatic-mobile-frontend/app/pages/edit-rule.coffee"],
        'edit-variable-page': ["pimatic-mobile-frontend/app/pages/edit-variable.coffee"],
        'edit-group-page': ["pimatic-mobile-frontend/app/pages/edit-group.coffee"],
        'edit-device-page': ["pimatic-mobile-frontend/app/pages/edit-device.coffee"],
        'edit-devicepage-page': ["pimatic-mobile-frontend/app/pages/edit-devicepage.coffee"],
        'edit-plugin-page': ["pimatic-mobile-frontend/app/pages/edit-plugin.coffee"],
        'database-page': ["pimatic-mobile-frontend/app/pages/database.coffee"],
        'updates-page': ["pimatic-mobile-frontend/app/pages/updates.coffee"],
        'config-page': ["pimatic-mobile-frontend/app/pages/config.coffee"],
        'rules-page': ["pimatic-mobile-frontend/app/pages/rules.coffee"],
        'groups-page': ["pimatic-mobile-frontend/app/pages/groups.coffee"],
        'devicepages-page': ["pimatic-mobile-frontend/app/pages/devicepages.coffee"],
        'devices-page': ["pimatic-mobile-frontend/app/pages/devices.coffee"],
        'variables-page': ["pimatic-mobile-frontend/app/pages/variables.coffee"],
        'log-page': ["pimatic-mobile-frontend/app/pages/log-messages.coffee"],
        'events-page': ["pimatic-mobile-frontend/app/pages/events.coffee"],
        'plugins-page': ["pimatic-mobile-frontend/app/pages/plugins.coffee"],
        'graph-page': ["pimatic-mobile-frontend/app/pages/graph.coffee"]
      };
      css = {
        base: ["pimatic-mobile-frontend/app/css/theme/default/jquery.mobile-1.4.5.css", "pimatic-mobile-frontend/app/css/jquery.mobile.toast.css", "pimatic-mobile-frontend/app/css/jquery.mobile.datepicker.css", "pimatic-mobile-frontend/app/css/jquery.textcomplete.css", "pimatic-mobile-frontend/app/css/owl.carousel.css", "pimatic-mobile-frontend/app/css/sweetalert2.css", "pimatic-mobile-frontend/app/css/mobiscroll.animation.css", "pimatic-mobile-frontend/app/css/mobiscroll.widget.css", "pimatic-mobile-frontend/app/css/mobiscroll.scroller.css"],
        style: ["pimatic-mobile-frontend/app/css/jqm-icon-pack-fa.css", "pimatic-mobile-frontend/app/css/attribute-icons.css"].concat(this.additionalAssetFiles['css']),
        editor: ["pimatic-mobile-frontend/app/css/jsoneditor.css"]
      };
      napAssets = nap({
        appDir: parentDir,
        publicDir: "pimatic-mobile-frontend/public",
        mode: this.config.mode,
        minify: false,
        assets: {
          js: js,
          css: css
        }
      });
      minPath = (function(_this) {
        return function(p) {
          var minFile;
          minFile = p.replace(/\.[^\.]+$/, '.min$&').replace(/\.coffee$/, '.js');
          if (fs.existsSync(parentDir + "/" + minFile)) {
            return minFile;
          }
          return p;
        };
      })(this);
      if (this.config.mode === "production") {
        ref = napAssets.assets.js;
        for (sec in ref) {
          files = ref[sec];
          for (i = j = 0, len = files.length; j < len; i = ++j) {
            f = files[i];
            files[i] = minPath(f);
          }
        }
        for (assetType in napAssets.assets) {
          ref1 = napAssets.assets[assetType];
          for (sec in ref1) {
            files = ref1[sec];
            for (i = l = 0, len1 = files.length; l < len1; i = ++l) {
              f = files[i];
              if (!S(f).startsWith(parentDir.replace(/\\/g, '/'))) {
                continue;
              }
              files[i] = path.relative(parentDir, f);
            }
          }
        }
        env.logger.info("packing static assets");
        nap["package"]();
        env.logger.info("packing static assets finished");
      }
      assets = ['/', '/socket.io/socket.io.js', '/api/decl-api-client.js'];
      ref2 = fs.readdirSync(__dirname + '/public/assets');
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        f = ref2[m];
        assets.push("/assets/" + f);
      }
      ref3 = fs.readdirSync(__dirname + '/public');
      for (n = 0, len3 = ref3.length; n < len3; n++) {
        f = ref3[n];
        if (!(f === 'index.html' || f === 'info.md') && fs.lstatSync(__dirname + "/public/" + f).isFile()) {
          assets.push("/" + f);
        }
      }
      this.framework.userManager.addAllowPublicAccessCallback((function(_this) {
        return function(req) {
          var ref4;
          return (req.url.match(/^\/socket\.io\/.*$/) != null) || (ref4 = req.url, indexOf.call(assets, ref4) >= 0) || (req.url === '/application.manifest') || (req.url.match(/^\/theme\/.*\.css(\?.*)?$/) != null);
        };
      })(this));
      if (this.config.mode === "development") {
        this.framework.userManager.addAllowPublicAccessCallback((function(_this) {
          return function(req) {
            return req.url.match(/^\/assets\/.*$/) != null;
          };
        })(this));
      }
      if (this.config.mode === "development") {
        this.app.use(nap.middleware);
      }
      this.app.use(express["static"](__dirname + "/public"));
      packedAssets = {
        scripts: {},
        styles: {}
      };
      for (k in js) {
        packedAssets.scripts[k] = nap.getSrcUrls('js', k, false);
      }
      for (k in css) {
        packedAssets.styles[k] = nap.getSrcUrls('css', k, false);
      }
      return [assets, packedAssets];
    };

    MobileFrontend.prototype.createThemeCss = function(themeName) {
      var cssFiles, theme;
      env.logger.info("rendering theme: " + themeName);
      theme = require("./themes/" + themeName);
      cssFiles = _.clone(theme.css);
      cssFiles.push("app/css/style.css");
      cssFiles = cssFiles.concat(theme.extraCss);
      return Promise.map(cssFiles, (function(_this) {
        return function(cssFile) {
          return fs.readFileAsync(__dirname + ("/" + cssFile));
        };
      })(this)).reduce((function(_this) {
        return function(fullCss, css) {
          return fullCss += css;
        };
      })(this)).then(function(css) {
        var themedCss;
        themedCss = jqmthemer.themeCss(theme, css);
        env.logger.info("rendering theme finished");
        return themedCss;
      });
    };

    MobileFrontend.prototype.setupThemes = function() {
      var themeBase;
      this._themesRenderings = {};
      this.app.get("/theme/:themeBase/:themeSub.css", (function(_this) {
        return function(req, res) {
          var cachePath, serveTheme, themeBase, themeFullName, themeSub;
          themeBase = req.params.themeBase;
          themeSub = req.params.themeSub;
          themeFullName = themeBase + "/" + themeSub;
          if (indexOf.call(_this.themes, themeFullName) < 0) {
            res.statusCode = 404;
            res.end();
            return;
          }
          cachePath = __dirname + ("/public/theme/" + themeBase + "-" + themeSub + ".css");
          if (req.query.save) {
            req.session.theme = themeFullName;
          }
          serveTheme = function(css) {
            res.statusCode = 200;
            res.setHeader("content-type", "text/css");
            res.setHeader("content-length", Buffer.byteLength(css));
            res.end(css);
            _this._themesRenderings[themeFullName] = void 0;
            return css;
          };
          if (_this.config.mode === "production") {
            if (_this._themesRenderings[themeFullName] != null) {
              return _this._themesRenderings[themeFullName].then(function(css) {
                return serveTheme(css);
              }).done();
            }
            return _this._themesRenderings[themeFullName] = fs.readFileAsync(cachePath).then(function(css) {
              return serveTheme(css.toString());
            })["catch"](function(error) {
              if (error.cause.code === 'ENOENT') {
                return _this.createThemeCss(themeFullName).then(function(css) {
                  return fs.writeFileAsync(cachePath, css).then(function() {
                    return serveTheme(css);
                  });
                });
              } else {
                throw error;
              }
            });
          } else {
            return _this.createThemeCss(themeFullName).then(function(css) {
              return serveTheme(css);
            }).done();
          }
        };
      })(this));
      themeBase = __dirname + "/public/theme";
      return fs.removeAsync(themeBase).then(function() {
        return fs.mkdirsAsync(themeBase);
      });
    };

    MobileFrontend.prototype.setupManifest = function(assets, indexHtml) {
      var createAppManifest, indexMD5, lastModified, manifest, md5, mobilefrontentLastupdate, parentDir, pimaticLastUpdate, renderManifest;
      parentDir = path.resolve(__dirname, '..');
      manifest = ((function() {
        switch (this.config.mode) {
          case "production":
            pimaticLastUpdate = fs.statSync(parentDir + "/pimatic/package.json").mtime;
            mobilefrontentLastupdate = fs.statSync(parentDir + "/pimatic-mobile-frontend/package.json").mtime;
            lastModified = (pimaticLastUpdate > mobilefrontentLastupdate ? pimaticLastUpdate : mobilefrontentLastupdate);
            md5 = crypto.createHash('md5');
            md5.update(indexHtml);
            indexMD5 = md5.digest('hex');
            renderManifest = require("render-appcache-manifest");
            createAppManifest = (function(_this) {
              return function() {
                return renderManifest({
                  cache: assets.concat(["/theme/" + _this.config.theme + ".css", "/theme/THEMENAME.css?save=1"]),
                  network: ['*'],
                  fallback: [],
                  lastModified: lastModified,
                  comment: indexMD5
                });
              };
            })(this);
            return manifest = createAppManifest();
          case "development":
            return manifest = "CACHE MANIFEST\nNETWORK:\n*";
          default:
            env.logger.error("Unknown mode: " + this.config.mode + "!");
            return "";
        }
      }).call(this));
      return this.app.get("/application.manifest", (function(_this) {
        return function(req, res) {
          var customManifest, ref, themeName;
          themeName = _this.config.theme;
          if ((req.session.theme != null) && (ref = req.session.theme, indexOf.call(_this.themes, ref) >= 0)) {
            themeName = req.session.theme;
          }
          customManifest = manifest.replace('THEMENAME', themeName);
          res.statusCode = 200;
          res.setHeader("content-type", "text/cache-manifest");
          res.setHeader("content-length", Buffer.byteLength(customManifest));
          return res.end(customManifest);
        };
      })(this));
    };

    return MobileFrontend;

  })(env.plugins.Plugin);
  plugin = new MobileFrontend;
  return plugin;
};
